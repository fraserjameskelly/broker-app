{"version":3,"sources":["pages/Home.tsx","components/Header.tsx","pages/PolicyType/CreatePolicyTypePage.tsx","pages/PolicyType/ListPolicyTypePage.tsx","pages/PolicyType/UpdatePolicyTypePage.tsx","pages/Policy/CreatePolicyPage.tsx","pages/Policy/ListPolicyPage.tsx","pages/Policy/UpdatePolicyPage.tsx","pages/Insurer/CreateInsurerPage.tsx","pages/Insurer/UpdateInsurerPage.tsx","pages/Insurer/ListInsurerPage.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","Col","Header","Navbar","bg","expand","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","to","exact","activeClassName","axios","require","CreatePolicyTypePage","match","history","useState","name","policyType","setPolicyType","error","setError","FormGroup","FormLabel","FormControl","type","value","placeholder","onChange","e","target","Button","onClick","postUrl","process","post","then","response","push","catch","data","ListPolicyTypePage","isLoading","setIsLoading","policyTypes","setPolicyTypes","useEffect","getUrl","get","length","Table","striped","bordered","responsive","sort","a","b","map","key","window","confirm","deleteUrl","delete","updatedTypes","filter","i","deleteItem","UpdatePolicyTypePage","policyTypeId","parseInt","params","CreatePolicyPage","customerName","customerAddress","premium","insurer","policy","setPolicy","insurers","setInsurers","getPolicyTypes","getInsurers","console","log","as","parseFloat","toString","ListPolicyPage","search","setSearch","dir","setSort","policyTypeFilter","setPolicyTypeFilter","insurerFilter","setInsurerFilter","policies","setPolicies","basePolicies","setBasePolicies","sortPolicies","sortVal","currentTarget","updatedPolicies","searchVal","toLowerCase","includes","Row","xs","md","filterVal","UpdatePolicyPage","policyId","pattern","CreateInsurerPage","setInsurer","UpdateInsurerPage","insurerId","ListInsurerPage","App","Container","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6a2e400b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\n\ninterface Props extends RouteComponentProps {}\n\nexport const Home: React.FC<Props> = () => (\n    <>\n        <Col>\n            <h1>Home</h1>\n\n            <p>\n                This application has been developed as a simple user interface\n                to input and save Broker Policies.\n            </p>\n            <p>\n                Use the navigation buttons in the header to view each page of\n                the application.\n            </p>\n            <p>\n                You can view, edit, create, and delete the following elements:\n            </p>\n            <ul>\n                <li>Policy</li>\n                <li>Policy Type</li>\n                <li>Insurer</li>\n            </ul>\n        </Col>\n    </>\n);\n","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { Link, NavLink } from 'react-router-dom';\n\nexport const Header = () => {\n    return (\n        <>\n            <Navbar bg=\"primary\" expand=\"lg\" variant=\"dark\">\n                <Navbar.Brand>Broker App</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"m-auto\">\n                        <NavLink to=\"/\" className=\"nav-link\" exact={true} activeClassName=\"active\">Home</NavLink>\n                        <NavLink to=\"/policy\" className=\"nav-link\" activeClassName=\"active\">Policies</NavLink>\n                        <NavLink to=\"/insurer\" className=\"nav-link\" activeClassName=\"active\">Insurers</NavLink>\n                        <NavLink to=\"/policy-type\" className=\"nav-link\" activeClassName=\"active\">Policy Types</NavLink>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </>\n    );\n};\n\nexport default Header;\n","import { AxiosResponse } from 'axios';\nimport React, { useState } from 'react';\nimport {\n    Button,\n    Col,\n    FormControl,\n    FormGroup,\n    FormLabel,\n} from 'react-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { PolicyType } from '../../types';\n\nconst axios = require('axios');\n\nexport interface CreatePolicyTypePageProps extends RouteComponentProps {}\n\nexport const CreatePolicyTypePage = ({\n    match,\n    history,\n}: CreatePolicyTypePageProps) => {\n    const [policyType, setPolicyType] = useState({ name: '' } as PolicyType);\n    const [error, setError] = useState(null as null | string);\n\n    const createPolicyType = () => {\n        if ('' === policyType.name) {\n            setError('You must enter a value for the name');\n        }\n\n        // API call\n        const postUrl = `${process.env.REACT_APP_API_URL}/policy-type/`;\n\n        axios\n            .post(postUrl, policyType)\n            .then((response: AxiosResponse) => {\n                history.push(`/policy-type/list`);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    };\n\n    return (\n        <Col>\n            <h1>Create policy type</h1>\n            <FormGroup>\n                <FormLabel>Name</FormLabel>\n                <FormControl\n                    type=\"text\"\n                    value={policyType.name}\n                    placeholder=\"Enter name\"\n                    onChange={e => {\n                        setPolicyType({\n                            ...policyType,\n                            name: e.target.value,\n                        });\n                    }}\n                />\n            </FormGroup>\n            <Button onClick={createPolicyType} variant=\"success\">\n                Update\n            </Button>\n            {null !== error && <p>{error}</p>}\n        </Col>\n    );\n};\n\nexport default CreatePolicyTypePage;\n","import { AxiosResponse } from 'axios';\nimport { Button, Table } from 'react-bootstrap';\nimport React, { useState, useEffect } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { PolicyType } from '../../types';\n\nconst axios = require('axios');\n\nexport interface ListPolicyTypePageProps extends RouteComponentProps {}\n\nexport const ListPolicyTypePage = ({ match }: ListPolicyTypePageProps) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null as null | string);\n    const [policyTypes, setPolicyTypes] = useState([] as PolicyType[]);\n\n    useEffect(() => {\n        const getUrl = `${process.env.REACT_APP_API_URL}/policy-type`;\n\n        axios\n            .get(getUrl)\n            .then((response: AxiosResponse<PolicyType[]>) => {\n                setIsLoading(false);\n                setPolicyTypes(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    }, []);\n\n    const deleteItem = (policyType: PolicyType) => {\n        const deleteUrl = `${process.env.REACT_APP_API_URL}/policy-type/${policyType.id}`;\n\n        axios\n            .delete(deleteUrl)\n            .then((response: AxiosResponse) => {\n                const updatedTypes = policyTypes.filter(\n                    i => i.id !== policyType.id\n                );\n                setPolicyTypes(updatedTypes);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    };\n\n    return (\n        <>\n            <h1>Policy types</h1>\n            {isLoading && <p>Loading...</p>}\n\n            {policyTypes.length > 0 && (\n                <Table striped bordered responsive>\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Name</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {policyTypes\n                            .sort((a, b) =>\n                                (a.id as number) > (b.id as number) ? 1 : -1\n                            )\n                            .map(policyType => (\n                                <tr key={policyType.id}>\n                                    <td>{policyType.id}</td>\n                                    <td>{policyType.name}</td>\n                                    <td className=\"actions\">\n                                        <div>\n                                            <Link\n                                                to={`/policy-type/update/${policyType.id}`}\n                                                className=\"btn btn-info mr-2\"\n                                            >\n                                                Edit\n                                            </Link>\n                                            <Button\n                                                variant=\"danger\"\n                                                onClick={() => {\n                                                    if (\n                                                        window.confirm(\n                                                            'Delete this Policy Type? It will also delete any Policies associated.'\n                                                        )\n                                                    ) {\n                                                        deleteItem(policyType);\n                                                    }\n                                                }}\n                                            >\n                                                Delete\n                                            </Button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            ))}\n                    </tbody>\n                </Table>\n            )}\n\n            {null !== error && <p>{error}</p>}\n\n            <Link to={'/policy-type/create'} className=\"btn btn-success\">\n                Create new Policy Type\n            </Link>\n        </>\n    );\n};\n\nexport default ListPolicyTypePage;\n","import { AxiosResponse } from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport {\n    Button,\n    Col,\n    FormControl,\n    FormGroup,\n    FormLabel,\n} from 'react-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { PolicyType } from '../../types';\n\nconst axios = require('axios');\n\nexport interface UpdatePolicyTypePageProps\n    extends RouteComponentProps<{ policyTypeId: string }> {}\n\nexport const UpdatePolicyTypePage = ({\n    match,\n    history,\n}: UpdatePolicyTypePageProps) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null as null | string);\n    const [policyType, setPolicyType] = useState(null as null | PolicyType);\n\n    const policyTypeId = parseInt(match.params.policyTypeId);\n\n    useEffect(() => {\n        // API call\n        const getUrl = `${process.env.REACT_APP_API_URL}/policy-type/${policyTypeId}`;\n\n        axios\n            .get(getUrl)\n            .then((response: AxiosResponse<PolicyType>) => {\n                setIsLoading(false);\n                setPolicyType(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    }, []);\n\n    const updatePolicyType = () => {\n        // API call\n        const postUrl = `${process.env.REACT_APP_API_URL}/policy-type/${policyTypeId}`;\n\n        axios\n            .post(postUrl, policyType)\n            .then((response: AxiosResponse) => {\n                setIsLoading(false);\n                history.push(`/policy-type/list`);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    };\n\n    return (\n        <Col>\n            <h1>Policy type {match.params.policyTypeId}</h1>\n            {isLoading && <p>Loading...</p>}\n\n            {null !== policyType && (\n                <>\n                    <FormGroup>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            value={policyType.name}\n                            placeholder=\"Enter name\"\n                            onChange={e => {\n                                setPolicyType({\n                                    ...policyType,\n                                    name: e.target.value,\n                                });\n                            }}\n                        />\n                    </FormGroup>\n                    <Button onClick={updatePolicyType} variant=\"success\">\n                        Update\n                    </Button>\n                </>\n            )}\n\n            {null !== error && <p>{error}</p>}\n        </Col>\n    );\n};\n\nexport default UpdatePolicyTypePage;\n","import { AxiosResponse } from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    Col,\n    FormControl,\n    FormGroup,\n    FormLabel,\n} from 'react-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Insurer, Policy, PolicyType } from '../../types';\n\nconst axios = require('axios');\n\nexport interface CreatePolicyPageProps extends RouteComponentProps {}\n\nexport const CreatePolicyPage = ({ match, history }: CreatePolicyPageProps) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [policy, setPolicy] = useState({\n        customerName: '',\n        customerAddress: '',\n        premium: '0',\n        policyType: 0,\n        insurer: 0,\n    } as Policy);\n    const [policyTypes, setPolicyTypes] = useState([] as PolicyType[]);\n    const [insurers, setInsurers] = useState([] as Insurer[]);\n    const [error, setError] = useState(null as null | string);\n\n    useEffect(() => {\n        const getPolicyTypes = `${process.env.REACT_APP_API_URL}/policy-type`;\n        const getInsurers = `${process.env.REACT_APP_API_URL}/insurer`;\n\n        axios\n            .get(getPolicyTypes)\n            .then((response: AxiosResponse<PolicyType[]>) => {\n                setIsLoading(false);\n\n                console.log(response.data);\n\n                setPolicyTypes(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n\n        axios\n            .get(getInsurers)\n            .then((response: AxiosResponse<Insurer[]>) => {\n                setIsLoading(false);\n                setInsurers(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    }, []);\n\n    const createPolicy = () => {\n        if ('' === policy.customerName) {\n            setError('You must enter a value for the customer name');\n            return;\n        }\n\n        if ('' === policy.customerAddress) {\n            setError('You must enter a value for the customer address');\n            return;\n        }\n\n        if (0 >= parseFloat(policy.premium)) {\n            setError('Please enter a valid number for the premium');\n            return;\n        }\n\n        if (0 === policy.policyType as number) {\n            setError('Please select a policy type');\n            return;\n        }\n\n        if (0 === policy.insurer as number) {\n            setError('Please select an insurer');\n            return;\n        }\n\n        setPolicy({\n            ...policy,\n            premium: parseFloat(policy.premium).toString(),\n        });\n\n        // API call\n        const postUrl = `${process.env.REACT_APP_API_URL}/policy/`;\n\n        axios\n            .post(postUrl, policy)\n            .then((response: AxiosResponse) => {\n                history.push(`/policy/list`);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    };\n\n    return (\n        <Col>\n            <h1>Create Policy </h1>\n            {isLoading && <p>Loading...</p>}\n\n            <FormGroup>\n                <FormLabel>Customer Name</FormLabel>\n                <FormControl\n                    type=\"text\"\n                    value={policy.customerName}\n                    placeholder=\"Enter customer name\"\n                    onChange={e => {\n                        setPolicy({ ...policy, customerName: e.target.value });\n                    }}\n                />\n            </FormGroup>\n            <FormGroup>\n                <FormLabel>Customer Address</FormLabel>\n                <FormControl\n                    type=\"text\"\n                    value={policy.customerAddress}\n                    placeholder=\"Enter customer address\"\n                    onChange={e => {\n                        setPolicy({\n                            ...policy,\n                            customerAddress: e.target.value,\n                        });\n                    }}\n                />\n            </FormGroup>\n            <FormGroup>\n                <FormLabel>Premium</FormLabel>\n                <FormControl\n                    type=\"text\"\n                    value={policy.premium}\n                    placeholder=\"Enter premium\"\n                    onChange={e => {\n                        setPolicy({\n                            ...policy,\n                            premium: e.target.value,\n                        });\n                    }}\n                />\n            </FormGroup>\n            <FormGroup>\n                <FormLabel>Policy Type</FormLabel>\n                <FormControl\n                    as=\"select\"\n                    onChange={e => {\n                        setPolicy({\n                            ...policy,\n                            policyType: parseInt(e.target.value),\n                        });\n                    }}\n                >\n                    <option value=\"0\">Select Policy Type</option>\n                    {policyTypes\n                        .sort((a, b) =>\n                            (a.id as number) > (b.id as number) ? 1 : -1\n                        )\n                        .map(policyType => (\n                            <option\n                                key={policyType.id}\n                                value={policyType.id as number}\n                            >\n                                {policyType.name}\n                            </option>\n                        ))}\n                </FormControl>\n            </FormGroup>\n            <FormGroup>\n                <FormLabel>Insurer</FormLabel>\n                <FormControl\n                    as=\"select\"\n                    onChange={e => {\n                        setPolicy({\n                            ...policy,\n                            insurer: parseInt(e.target.value),\n                        });\n                    }}\n                >\n                    <option value=\"0\">Select Insurer</option>\n\n                    {insurers\n                        .sort((a, b) =>\n                            (a.id as number) > (b.id as number) ? 1 : -1\n                        )\n                        .map(insurer => (\n                            <option\n                                key={insurer.id}\n                                value={insurer.id as number}\n                            >\n                                {insurer.name}\n                            </option>\n                        ))}\n                </FormControl>\n            </FormGroup>\n            <Button onClick={createPolicy} variant=\"success\">\n                Create\n            </Button>\n            {null !== error && <p>{error}</p>}\n        </Col>\n    );\n};\n\nexport default CreatePolicyPage;\n","import { AxiosResponse } from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport {\n    Button,\n    Col,\n    FormControl,\n    InputGroup,\n    Row,\n    Table,\n} from 'react-bootstrap';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Insurer, Policy, PolicyType } from '../../types';\n\nconst axios = require('axios');\n\nexport interface ListPolicyPageProps extends RouteComponentProps {}\n\nexport const ListPolicyPage = ({ match }: ListPolicyPageProps) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null as null | string);\n\n    const [search, setSearch] = useState('' as string);\n    const [sort, setSort] = useState({ name: 'ID', dir: 'ASC' });\n    const [policyTypeFilter, setPolicyTypeFilter] = useState('' as string);\n    const [insurerFilter, setInsurerFilter] = useState('' as string);\n\n    const [policyTypes, setPolicyTypes] = useState([] as PolicyType[]);\n    const [insurers, setInsurers] = useState([] as Insurer[]);\n\n    const [policies, setPolicies] = useState([] as Policy[]);\n    const [basePolicies, setBasePolicies] = useState([] as Policy[]);\n\n    useEffect(() => {\n        const getUrl = `${process.env.REACT_APP_API_URL}/policy`;\n        const getPolicyTypes = `${process.env.REACT_APP_API_URL}/policy-type`;\n        const getInsurers = `${process.env.REACT_APP_API_URL}/insurer`;\n\n        axios\n            .get(getUrl)\n            .then((response: AxiosResponse<Policy[]>) => {\n                setIsLoading(false);\n                setBasePolicies(\n                    response.data.sort((a, b) =>\n                        (a.id as number) > (b.id as number) ? 1 : -1\n                    )\n                );\n                setPolicies(\n                    response.data.sort((a, b) =>\n                        (a.id as number) > (b.id as number) ? 1 : -1\n                    )\n                );\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n\n        axios\n            .get(getPolicyTypes)\n            .then((response: AxiosResponse<PolicyType[]>) => {\n                setIsLoading(false);\n                setPolicyTypes(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n\n        axios\n            .get(getInsurers)\n            .then((response: AxiosResponse<Insurer[]>) => {\n                setIsLoading(false);\n                setInsurers(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    }, []);\n\n    const deleteItem = (policy: Policy) => {\n        const deleteUrl = `${process.env.REACT_APP_API_URL}/policy/${policy.id}`;\n\n        axios\n            .delete(deleteUrl)\n            .then((response: AxiosResponse) => {\n                const updatedTypes = policies.filter(i => i.id !== policy.id);\n                setPolicies(updatedTypes);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    };\n\n    const searchPolicies = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const searchVal = e.target.value;\n        setSearch(searchVal);\n\n        if (searchVal === '') {\n            setPolicies(basePolicies);\n        } else {\n            const updatedPolicies = policies.filter(\n                i =>\n                    i.customerName\n                        .toLowerCase()\n                        .includes(searchVal.toLowerCase()) ||\n                    i.customerAddress\n                        .toLowerCase()\n                        .includes(searchVal.toLowerCase())\n            );\n            setPolicies(updatedPolicies);\n        }\n    };\n\n    const filterPolicyType = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const filterVal = e.target.value;\n        setPolicyTypeFilter(filterVal);\n\n        if (filterVal === '') {\n            setPolicies(basePolicies);\n        } else {\n            const updatedPolicies = basePolicies.filter(\n                i => (i.policyType as PolicyType).id === parseInt(filterVal)\n            );\n            setPolicies(updatedPolicies);\n\n            //reset other filters\n            setSearch('');\n            setSort({ name: 'ID', dir: 'ASC' });\n        }\n    };\n\n    const filterInsurer = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const filterVal = e.target.value;\n        setInsurerFilter(filterVal);\n\n        if (filterVal === '') {\n            setPolicies(basePolicies);\n        } else {\n            const updatedPolicies = basePolicies.filter(\n                i => (i.insurer as Insurer).id === parseInt(filterVal)\n            );\n            setPolicies(updatedPolicies);\n\n            //reset other filters\n            setSearch('');\n            setSort({ name: 'ID', dir: 'ASC' });\n        }\n    };\n\n    const sortPolicies = (e: React.MouseEvent<HTMLButtonElement>) => {\n        const sortVal = e.currentTarget.value;\n\n        const dir =\n            sort.name !== sortVal ||\n            (sort.name === sortVal && sort.dir === 'DESC')\n                ? 'ASC'\n                : 'DESC';\n\n        setSort({ name: sortVal, dir: dir });\n\n        if (sortVal === 'ID') {\n            if (dir === 'ASC') {\n                const updatedPolicies = policies.sort((a, b) =>\n                    (a.id as number) > (b.id as number) ? 1 : -1\n                );\n                setPolicies(updatedPolicies);\n            } else {\n                const updatedPolicies = policies.sort((a, b) =>\n                    (a.id as number) < (b.id as number) ? 1 : -1\n                );\n                setPolicies(updatedPolicies);\n            }\n        } else if (sortVal === 'Name') {\n            if (dir === 'ASC') {\n                const updatedPolicies = policies.sort((a, b) =>\n                    a.customerName > b.customerName ? 1 : -1\n                );\n                setPolicies(updatedPolicies);\n            } else {\n                const updatedPolicies = policies.sort((a, b) =>\n                    a.customerName < b.customerName ? 1 : -1\n                );\n                setPolicies(updatedPolicies);\n            }\n        } else if (sortVal === 'Premium') {\n            if (dir === 'ASC') {\n                const updatedPolicies = policies.sort((a, b) =>\n                    a.premium > b.premium ? 1 : -1\n                );\n                setPolicies(updatedPolicies);\n            } else {\n                const updatedPolicies = policies.sort((a, b) =>\n                    a.premium < b.premium ? 1 : -1\n                );\n                setPolicies(updatedPolicies);\n            }\n        }\n    };\n\n    return (\n        <Col>\n            <h1>Policies</h1>\n            {isLoading && <p>Loading...</p>}\n\n            <div className=\"mb-3\">\n                <FormControl\n                    type=\"text\"\n                    value={search}\n                    placeholder=\"Search\"\n                    onChange={searchPolicies}\n                    className=\"table-search\"\n                />\n            </div>\n            <Row className=\"filter-row mb-3\">\n                <Col xs={12} md={6}>\n                    <FormControl\n                        as=\"select\"\n                        onChange={filterPolicyType}\n                        value={policyTypeFilter}\n                    >\n                        <option value=\"\">Filter by Policy Type</option>\n                        {policyTypes\n                            .sort((a, b) =>\n                                (a.id as number) > (b.id as number) ? 1 : -1\n                            )\n                            .map(policyType => (\n                                <option\n                                    key={policyType.id}\n                                    value={policyType.id as number}\n                                >\n                                    {policyType.name}\n                                </option>\n                            ))}\n                    </FormControl>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormControl\n                        as=\"select\"\n                        onChange={filterInsurer}\n                        value={insurerFilter}\n                    >\n                        <option value=\"\">Filter by Insurer</option>\n                        {insurers\n                            .sort((a, b) =>\n                                (a.id as number) > (b.id as number) ? 1 : -1\n                            )\n                            .map(insurer => (\n                                <option\n                                    key={insurer.id}\n                                    value={insurer.id as number}\n                                >\n                                    {insurer.name}\n                                </option>\n                            ))}\n                    </FormControl>\n                </Col>\n            </Row>\n\n            {policies.length > 0 && (\n                <>\n                    <Table striped bordered responsive>\n                        <thead>\n                            <tr>\n                                <th>\n                                    <button\n                                        className={`sort-button ${\n                                            sort.name === 'ID' && sort.dir\n                                        }`}\n                                        onClick={sortPolicies}\n                                        value=\"ID\"\n                                    >\n                                        ID\n                                    </button>\n                                </th>\n                                <th>\n                                    <button\n                                        className={`sort-button ${\n                                            sort.name === 'Name' && sort.dir\n                                        }`}\n                                        onClick={sortPolicies}\n                                        value=\"Name\"\n                                    >\n                                        Customer Name\n                                    </button>\n                                </th>\n                                <th className=\"d-none d-md-table-cell\">\n                                    Customer Address\n                                </th>\n                                <th className=\"d-none d-md-table-cell\">\n                                    <button\n                                        className={`sort-button ${\n                                            sort.name === 'Premium' && sort.dir\n                                        }`}\n                                        onClick={sortPolicies}\n                                        value=\"Premium\"\n                                    >\n                                        Premium\n                                    </button>\n                                </th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {policies.map(policy => (\n                                <tr key={policy.id}>\n                                    <td>{policy.id}</td>\n                                    <td>{policy.customerName}</td>\n                                    <td className=\"d-none d-md-table-cell\">\n                                        {policy.customerAddress}\n                                    </td>\n                                    <td className=\"d-none d-md-table-cell\">\n                                        {policy.premium}\n                                    </td>\n                                    <td className=\"actions\">\n                                        <div>\n                                            <Link\n                                                to={`/policy/update/${policy.id}`}\n                                                className=\"btn btn-info mr-2\"\n                                            >\n                                                Edit\n                                            </Link>\n                                            <Button\n                                                variant=\"danger\"\n                                                onClick={() => {\n                                                    if (\n                                                        window.confirm(\n                                                            'Delete this item?'\n                                                        )\n                                                    ) {\n                                                        deleteItem(policy);\n                                                    }\n                                                }}\n                                            >\n                                                Delete\n                                            </Button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </>\n            )}\n\n            {null !== error && <p>{error}</p>}\n\n            <Link to={'/policy/create'} className=\"btn btn-success\">\n                Create new Policy\n            </Link>\n        </Col>\n    );\n};\n\nexport default ListPolicyPage;\n","import { AxiosResponse } from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport {\n    Button,\n    Col,\n    FormControl,\n    FormGroup,\n    FormLabel,\n} from 'react-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Insurer, Policy, PolicyType } from '../../types';\n\nconst axios = require('axios');\n\nexport interface UpdatePolicyPageProps\n    extends RouteComponentProps<{ policyId: string }> {}\n\nexport const UpdatePolicyPage = ({ match, history }: UpdatePolicyPageProps) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null as null | string);\n    const [policy, setPolicy] = useState(null as null | Policy);\n    const [policyTypes, setPolicyTypes] = useState([] as PolicyType[]);\n    const [insurers, setInsurers] = useState([] as Insurer[]);\n\n    const policyId = parseInt(match.params.policyId);\n\n    useEffect(() => {\n        // API call\n        const getUrl = `${process.env.REACT_APP_API_URL}/policy/${policyId}`;\n        const getPolicyTypes = `${process.env.REACT_APP_API_URL}/policy-type`;\n        const getInsurers = `${process.env.REACT_APP_API_URL}/insurer`;\n\n        axios\n            .get(getUrl)\n            .then((response: AxiosResponse<Policy>) => {\n                setIsLoading(false);\n                setPolicy(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n\n        axios\n            .get(getPolicyTypes)\n            .then((response: AxiosResponse<PolicyType[]>) => {\n                setIsLoading(false);\n                setPolicyTypes(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n\n        axios\n            .get(getInsurers)\n            .then((response: AxiosResponse<Insurer[]>) => {\n                setIsLoading(false);\n                setInsurers(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    }, []);\n\n    const updatePolicy = () => {\n        if (null !== policy) {\n            console.log(policy.policyType);\n\n            if ('' === policy.customerName) {\n                setError('You must enter a value for the customer name');\n                return;\n            }\n\n            if ('' === policy.customerAddress) {\n                setError('You must enter a value for the customer address');\n                return;\n            }\n\n            if (0 >= parseFloat(policy.premium)) {\n                setError('Please enter a valid number for the premium');\n                return;\n            }\n\n            setPolicy({\n                ...policy,\n                premium: parseFloat(policy.premium).toString(),\n            });\n\n            // API call\n            const postUrl = `${process.env.REACT_APP_API_URL}/policy/${policyId}`;\n\n            axios\n                .post(postUrl, policy)\n                .then((response: AxiosResponse) => {\n                    setIsLoading(false);\n                    history.push(`/policy/list`);\n                })\n                .catch((response: AxiosResponse) => {\n                    setError(response.data);\n                });\n        }\n    };\n\n    return (\n        <Col>\n            <h1>Update Policy {match.params.policyId}</h1>\n            {isLoading && <p>Loading...</p>}\n\n            {null !== policy && (\n                <>\n                    <FormGroup>\n                        <FormLabel>Customer Name</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            value={policy.customerName}\n                            placeholder=\"Enter customer name\"\n                            onChange={e => {\n                                setPolicy({\n                                    ...policy,\n                                    customerName: e.target.value,\n                                });\n                            }}\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <FormLabel>Customer Address</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            value={policy.customerAddress}\n                            placeholder=\"Enter customer address\"\n                            onChange={e => {\n                                setPolicy({\n                                    ...policy,\n                                    customerAddress: e.target.value,\n                                });\n                            }}\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <FormLabel>Premium</FormLabel>\n                        <FormControl\n                            type=\"input\"\n                            value={policy.premium}\n                            placeholder=\"Enter premium\"\n                            onChange={e => {\n                                setPolicy({\n                                    ...policy,\n                                    premium: e.target.value,\n                                });\n                            }}\n                            pattern=\"[0-9]+([\\.,][0-9]+)?\"\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <FormLabel>Policy Type</FormLabel>\n                        <FormControl\n                            as=\"select\"\n                            value={(policy.policyType as PolicyType).id as number}\n                            onChange={e => {\n                                setPolicy({\n                                    ...policy,\n                                    policyType: parseInt(e.target.value),\n                                });\n                            }}\n                        >\n                            {policyTypes\n                                .sort((a, b) =>\n                                    (a.id as number) > (b.id as number) ? 1 : -1\n                                )\n                                .map(policyType => (\n                                    <option\n                                        key={policyType.id}\n                                        value={policyType.id as number}\n                                    >\n                                        {policyType.name}\n                                    </option>\n                                ))}\n                        </FormControl>\n                    </FormGroup>\n                    <FormGroup>\n                        <FormLabel>Insurer</FormLabel>\n                        <FormControl\n                            as=\"select\"\n                            value={(policy.insurer as Insurer).id as number}                            \n                            onChange={e => {\n                                setPolicy({\n                                    ...policy,\n                                    insurer: parseInt(e.target.value),\n                                });\n                            }}\n                        >\n                            \n                            {insurers\n                                .sort((a, b) =>\n                                    (a.id as number) > (b.id as number) ? 1 : -1\n                                )\n                                .map(insurer => (\n                                    <option\n                                        key={insurer.id}\n                                        value={insurer.id as number}\n                                    >\n                                        {insurer.name}\n                                    </option>\n                                ))}\n                        </FormControl>\n                    </FormGroup>\n                    <Button onClick={updatePolicy} variant=\"success\">\n                        Update\n                    </Button>\n                </>\n            )}\n\n            {null !== error && <p>{error}</p>}\n        </Col>\n    );\n};\n\nexport default UpdatePolicyPage;\n","import { AxiosResponse } from 'axios';\nimport React, { useState } from 'react';\nimport { Button, Col, FormControl, FormGroup, FormLabel } from 'react-bootstrap';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Insurer } from '../../types';\n\nconst axios = require('axios');\n\nexport interface CreateInsurerPageProps extends RouteComponentProps {}\n\nexport const CreateInsurerPage = ({\n    match,\n    history,\n}: CreateInsurerPageProps) => {\n    const [insurer, setInsurer] = useState({ name: '' } as Insurer);\n    const [error, setError] = useState(null as null | string);\n\n    const createInsurer = () => {\n        if ('' === insurer.name) {\n            setError('You must enter a value for the name');\n        }\n\n        // API call\n        const postUrl = `${process.env.REACT_APP_API_URL}/insurer/`;\n\n        axios\n            .post(postUrl, insurer)\n            .then((response: AxiosResponse) => {\n                history.push(`/insurer/list`);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    };\n\n    return (\n        <Col>\n            <h1>Create Insurer</h1>\n            <FormGroup>\n                <FormLabel>Name</FormLabel>\n                <FormControl\n                    type=\"text\"\n                    value={insurer.name}\n                    placeholder=\"Enter name\"\n                    onChange={e => {\n                        setInsurer({ ...insurer, name: e.target.value });\n                    }}\n                />\n            </FormGroup>\n            <Button onClick={createInsurer} variant=\"success\">\n                Create\n            </Button>\n            {null !== error && <p>{error}</p>}\n        </Col>\n    );\n};\n\nexport default CreateInsurerPage;\n","import { AxiosResponse } from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Col, FormControl, FormGroup, FormLabel } from 'react-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Insurer } from '../../types';\n\nconst axios = require('axios');\n\nexport interface UpdateInsurerPageProps\n    extends RouteComponentProps<{ insurerId: string }> {}\n\nexport const UpdateInsurerPage = ({\n    match,\n    history,\n}: UpdateInsurerPageProps) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null as null | string);\n    const [insurer, setInsurer] = useState(null as null | Insurer);\n\n    const insurerId = parseInt(match.params.insurerId);\n\n    useEffect(() => {\n        // API call\n        const getUrl = `${process.env.REACT_APP_API_URL}/insurer/${insurerId}`;\n\n        axios\n            .get(getUrl)\n            .then((response: AxiosResponse<Insurer>) => {\n                setIsLoading(false);\n                setInsurer(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    }, []);\n\n    const updateInsurer = () => {\n        // API call\n        const postUrl = `${process.env.REACT_APP_API_URL}/insurer/${insurerId}`;\n\n        axios\n            .post(postUrl, insurer)\n            .then((response: AxiosResponse) => {\n                setIsLoading(false);\n                history.push(`/insurer/list`);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    };\n\n    return (\n        <Col>\n            <h1>Insurer {match.params.insurerId}</h1>\n            {isLoading && <p>Loading...</p>}\n\n            {null !== insurer && (\n                <>\n                    <FormGroup>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl\n                            type=\"text\"\n                            value={insurer.name}\n                            placeholder=\"Enter name\"\n                            onChange={e => {\n                                setInsurer({\n                                    ...insurer,\n                                    name: e.target.value,\n                                });\n                            }}\n                        />\n                    </FormGroup>\n                    <Button onClick={updateInsurer} variant=\"success\">\n                        Create\n                    </Button>\n                </>\n            )}\n\n            {null !== error && <p>{error}</p>}\n        </Col>\n    );\n};\n\nexport default UpdateInsurerPage;\n","import { AxiosResponse } from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Col, Table } from 'react-bootstrap';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Insurer } from '../../types';\n\nconst axios = require('axios');\n\nexport interface ListInsurerPageProps extends RouteComponentProps {}\n\nexport const ListInsurerPage = ({ match }: ListInsurerPageProps) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null as null | string);\n    const [insurers, setInsurers] = useState([] as Insurer[]);\n\n    useEffect(() => {\n        const getUrl = `${process.env.REACT_APP_API_URL}/insurer`;\n\n        axios\n            .get(getUrl)\n            .then((response: AxiosResponse<Insurer[]>) => {\n                setIsLoading(false);\n                setInsurers(response.data);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    }, []);\n\n    const deleteItem = (insurer: Insurer) => {\n        const deleteUrl = `${process.env.REACT_APP_API_URL}/insurer/${insurer.id}`;\n\n        axios\n            .delete(deleteUrl)\n            .then((response: AxiosResponse) => {\n                const updatedTypes = insurers.filter(i => i.id !== insurer.id);\n                setInsurers(updatedTypes);\n            })\n            .catch((response: AxiosResponse) => {\n                setError(response.data);\n            });\n    };\n\n    return (\n        <Col>\n            <h1>Insurers</h1>\n            {isLoading && <p>Loading...</p>}\n\n            {insurers.length > 0 && (\n                <Table striped bordered responsive>\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Name</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {insurers\n                            .sort((a, b) =>\n                                (a.id as number) > (b.id as number) ? 1 : -1\n                            )\n                            .map(insurer => (\n                                <tr key={insurer.id}>\n                                    <td className=\"id\">{insurer.id}</td>\n                                    <td>{insurer.name}</td>\n                                    <td className=\"actions\">\n                                        <div>\n                                            <Link\n                                                to={`/insurer/update/${insurer.id}`}\n                                                className=\"btn btn-info mr-2\"\n                                            >\n                                                Edit\n                                            </Link>\n                                            <Button\n                                                variant=\"danger\"\n                                                onClick={() => {\n                                                    if (\n                                                        window.confirm(\n                                                            'Delete this Insurer? It will also delete any Policies associated.'\n                                                        )\n                                                    ) {\n                                                        deleteItem(insurer);\n                                                    }\n                                                }}\n                                            >\n                                                Delete\n                                            </Button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            ))}\n                    </tbody>\n                </Table>\n            )}\n\n            {null !== error && <p>{error}</p>}\n\n            <Link to={'/insurer/create'} className=\"btn btn-success\">\n                Create new Insurer\n            </Link>\n        </Col>\n    );\n};\n\nexport default ListInsurerPage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Home } from '../pages/Home';\nimport Header from './Header';\n\nimport { CreatePolicyTypePage } from '../pages/PolicyType/CreatePolicyTypePage';\nimport { ListPolicyTypePage } from '../pages/PolicyType/ListPolicyTypePage';\nimport { UpdatePolicyTypePage } from '../pages/PolicyType/UpdatePolicyTypePage';\n\nimport { CreatePolicyPage } from '../pages/Policy/CreatePolicyPage';\nimport { ListPolicyPage } from '../pages/Policy/ListPolicyPage';\nimport { UpdatePolicyPage } from '../pages/Policy/UpdatePolicyPage';\n\nimport CreateInsurerPage from '../pages/Insurer/CreateInsurerPage';\nimport UpdateInsurerPage from '../pages/Insurer/UpdateInsurerPage';\nimport ListInsurerPage from '../pages/Insurer/ListInsurerPage';\n\nimport '../assets/styles/index.scss';\nimport { Container, Row } from 'react-bootstrap';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Header />\n            <Container>\n                <Row>\n                    <main className=\"p-3 col\">\n                        <Switch>\n                            <Route exact path=\"/\" component={Home} />\n\n                            <Route\n                                exact\n                                path=\"/policy/create\"\n                                component={CreatePolicyPage}\n                            />\n                            <Route\n                                exact\n                                path=\"/policy/update/:policyId\"\n                                component={UpdatePolicyPage}\n                            />\n                            <Route path=\"/policy/\" component={ListPolicyPage} />\n\n                            <Route\n                                exact\n                                path=\"/policy-type/create\"\n                                component={CreatePolicyTypePage}\n                            />\n                            <Route\n                                exact\n                                path=\"/policy-type/update/:policyTypeId\"\n                                component={UpdatePolicyTypePage}\n                            />\n                            <Route\n                                path=\"/policy-type/\"\n                                component={ListPolicyTypePage}\n                            />\n\n                            <Route\n                                exact\n                                path=\"/insurer/create\"\n                                component={CreateInsurerPage}\n                            />\n                            <Route\n                                exact\n                                path=\"/insurer/update/:insurerId\"\n                                component={UpdateInsurerPage}\n                            />\n                            <Route\n                                path=\"/insurer/\"\n                                component={ListInsurerPage}\n                            />\n                        </Switch>\n                    </main>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}